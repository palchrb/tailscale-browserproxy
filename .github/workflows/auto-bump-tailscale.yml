name: Auto-bump tailscale.com (tsnet) and release

on:
  schedule:
    - cron: "17 4 * * *"   # daglig 04:17 UTC
  workflow_dispatch: {}

permissions:
  contents: write   # commit, tag, release

jobs:
  bump_build_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.x"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Find current and latest tailscale.com version
        id: ts
        shell: bash
        run: |
          set -euo pipefail
          CURR=$(grep -E '^[[:space:]]*require[[:space:]]+tailscale\.com[[:space:]]+v' go.mod | awk '{print $2}')
          # Go viser .Update.Version kun hvis en nyere finnes
          LATEST=$(go list -m -u -json tailscale.com | jq -r '.Update.Version // ""')
          HAS_UPDATE=false
          if [ -n "$LATEST" ]; then HAS_UPDATE=true; fi
          echo "current=$CURR"      >> "$GITHUB_OUTPUT"
          echo "latest=$LATEST"     >> "$GITHUB_OUTPUT"
          echo "has_update=$HAS_UPDATE" >> "$GITHUB_OUTPUT"
          echo "Current: $CURR  Latest: ${LATEST:-<none>}  Has update: $HAS_UPDATE"

      # Alt under her kjører KUN ved ny versjon
      - name: Bump go.mod → ${{ steps.ts.outputs.latest }}
        if: steps.ts.outputs.has_update == 'true'
        run: |
          set -euo pipefail
          go get tailscale.com@${{ steps.ts.outputs.latest }}
          go mod tidy
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add go.mod go.sum
          git commit -m "chore: bump tailscale.com to ${{ steps.ts.outputs.latest }}"
          git push

      - name: Build Windows amd64 exe
        if: steps.ts.outputs.has_update == 'true'
        run: |
          GOOS=windows GOARCH=amd64 go build -trimpath -ldflags="-s -w" -o tsnet-browser-proxy.exe ./main.go

      - name: Create version tag (includes Tailscale version)
        if: steps.ts.outputs.has_update == 'true'
        id: tag
        env:
          TS_VER: ${{ steps.ts.outputs.latest }}
        run: |
          set -euo pipefail
          TAG="v-tsnet-${TS_VER}"      # f.eks. v-tsnet-1.88.3
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          git tag -a "$TAG" -m "tsnet-browser-proxy built against tailscale.com ${TS_VER}"
          git push origin "$TAG"

      - name: Create GitHub Release + upload exe
        if: steps.ts.outputs.has_update == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
          files: |
            tsnet-browser-proxy.exe
          body: |
            Automated build pinned to **tailscale.com ${{ steps.ts.outputs.latest }}** (includes `tsnet`).
            - Module bump committed: `${{ steps.ts.outputs.current }} → ${{ steps.ts.outputs.latest }}`
            - Workflow run: ${{ github.workflow }} / ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Nothing to do (already latest)
        if: steps.ts.outputs.has_update != 'true'
        run: |
          echo "tailscale.com er allerede på siste versjon (${ { steps.ts.outputs.current } }). Hopper over bump/build/release."
